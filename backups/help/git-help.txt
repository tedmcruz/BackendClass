----------------USING GIT AND GITHUB (Press "." on GITHUB to open VSC on the web)----------------------------------
    git config --global user.name “[firstname lastname]” = to name author.
    git config --global user.email “[valid-email]” = to assign email (use same email as github to make everything easier).
    git init = to initialize directory as Git repository.
    git clone [url] = to clone existeing git repository.
    git status = to check status of current branch or master.
    git add [file] = to add file to be ready to commit, replace "[file]" with "." to apply changes to everything on all files.
    git rest [file] = to reset file to previous stage before add, replace "[file]" with "." to apply changes to everything on all files.
    git commit -m “[descriptive message]” = to commit changes to upload to repository.
    git commit -a -m “[descriptive message]” = to commit while skipping adding stage.
    git branch = to list branches.
    git branch [branch-name] = to create new branch.
    git switch [branch-name] = to switch to chosen branch.
    git merge [branch-name] = to merge chosen branch to the branch were command was entered.
    git log = to list all commits within a branch.
    git diff branchB...branchA = to show the diff of what is in branchA that is not in branchB.
    git log --follow [file] = to show the commits that changed file, even across renames.
    git log branchB..branchA = to show the commits on branchA that are not on branchB
    git push origin [branch] = Transmit local branch commits to the remote repository branch
    q = quit running command
    git branch -m old-name new-name = to change branch name.

----------------INTSALL NODE SASS----------------------------------
    Install "node.js version 17.4.0" for easy use.
    node init = initialize node
    npm init = initialize npm (Node Package Manager)
    npm install node-sass -D = to install node_modules. If an error is received because of python, check version of node. Last verified working version was 17.4.0.
    npm install = to install all dependencies the project may have as according to the "package.json" file on the project's main folder.
    npm install nodeman -D = to install nodeman

---------------USE TRANSLATER SCSS---------------------------------------
    (Here a "," [comma] is needed after every line except the last line before "}" [closing bracket] )
    "build-sass": "node-sass --include-path scss sass/index.scss css/translated.css", = script to write under "test" on "package.json" file. 
    npm run build-sass = to create and link "css\traslated.css" file to "sass\index.scss" file.

    "watch-sass": "nodemon -e scss -x \"npm run build-sass\"" = "script to write under "build-sass" on "package.json" file.
    npm run watch-sass = to run script continiously and update "css\translated.css"file automatically.
    press "CTRL" + "c" on terminal = to stop watch-sass

-------------------To work on Javascript with local files in locally created server-------------------------------------------------

    To allow fetch() to work on javescript with local files, you have to run : "npm install -g http-server" , this will allow you to install a local server to allow fetch. 
        Then simply run http-server in any of your project directories:
            d:\my_project> http-server
            
            or

            http-server "d:\my_project"
            http-server "C:\Users\Ted Cruz\Desktop\SupplyJeT"

        Use "CONTROL" or "CTRL" + "C" to exit servers.

-----------------Install React JS----------------------------------

    Inside the main proyect folder, enter following commands:

    REACT JS

        To install react-js :     
        
            npm install -g create-react-app

        To create app in react :

            create-react-app [name-of-app]   or   npx create-react-app [name-of-app] (this command adds dependencies from the start)

        If previous steps don't work, try this:    

            To update tar (because to fix dependencies error needed for React JS):    

                    npm install -g tar@latest
                    npm install tar@6 -g

            If previous command don't work try ignoring the error with:

                npm i tar

            Alternatively you can follow these steps: First, install npm using the command:

                sudo apt install npm

            Then download the required dependencies: 

                npx create-react-app [name-of-app]

            Then use the following command to run the application. Error has been fixed.

                cd [name-of-app]
                npm start


        Starts the development server.:
            
            cd [name-of-app]

            npm start

        Bundles the app into static files for production and starts the test runner.
        
            npm run build

        [DO NOT USE] Removes this tool and copies build dependencies, configuration files and scripts into the app directory. If you do this, you can’t go back!
            
            npm run eject

----------------------------Moving between directories inside command-line (cmd) (change directory)-------------------------------

    To point to folder in cmd use "/" instead of "\".
    
    To travel to directory with "spaces" in between word you have to surround forlder with quotations = "folder"

        C:/Users/"Ted Cruz"/Desktop/SupplyJeT/   or   cd C:/Users/"Ted Cruz"/Desktop/SupplyJeT/

    To navigate:

        cd ~                        = got to root directory
        cd ~(here add route)        = to go to desired route
        cd ./(folder-name)          = move to (folder-name) which is located inside current route
        cd ../                      = go up a directory




---------------------------Add Polyfill for backward compatability------------------------

    Polyfill adds backward compatibility for older browsers to be able to view our content.

        npm install --save core-js@3.25.3

--------------------------Add React-JS routing dependencies ------------------------------

    Use "npm install react-router-dom" to add dependencies of React-JS to manage routing within a proyect.

--------------------------Terminal------------------------------------

    Add "cd" before the route to the path which will be opened, to change directory (remember to replace "/" with "\")
    
        Example 1: navigating around in the terminal
            Once you opened up your terminal, type in the following after the $ or > sign and hit enter: ($ or > is the prompt, you don’t have to retype that in the terminal, only the characters that come after them):

            $ pwd
            What do you think happened there? In your own words, try to explain what this command does.

            pwd or print working directory
            The pwd command prints out the current directory you are in. What are directories? Directories are folders, these terms are used interchangeably. If you just opened up your terminal, you are probably in the home directory of your computer, and should get an output similar to this:

            /Users/your-username
            Now that you know how to tell where you are in your computer, you might ask yourself: how I do know which files are in a directory? That’s where the ls command comes in handy.

            ls or list
            In your terminal type:

            $ ls
            and hit enter. Most likely this command returned you a bunch of files and folders. The ls command prints out the contents of a directory. If you are in the home directory of your computer you should see directories printed out such as Documents, Applications, etc. Now, how do you move across directories?

            cd or change directory
            The cd command allows you to move between directories. The cd command takes an argument, usually the name of the folder you want to move to, so the full command is cd your-directory.

            In the terminal, type:

            $ ls
            Let’s say we wanted to move to the Desktop folder: just type in your terminal

            $ cd Desktop
            Now type:

            $ pwd
            This should return you something like:

            /Users/your-username/Desktop
            Now that we moved to your Desktop, you can type ls again, then cd into it. We have just changed into a new directory. You can use these two commands to navigate around your computer.

            This is all good so far, but sometimes you might want to go deeper than one level in one command. cd allows you to do this by chaining the directories with a /, so cd your-directory becomes cd your-directory/directory-inside-your-directory.

            We now know how to move forward. But how to go back up the directory tree? Type in your terminal:

            $ cd ..
            Now do a pwd. You just went back one directory! Chaining works backwards too, so if you type cd ../.. you should be taken back two directories.

            If you want to go back to the home directory of your computer, simply type cd into the terminal. cd without an argument takes you back to the home directory regardless of where you are currently in the directory structure

            Exercise 1: use ls and cd to move in and out of a few directories on your computer
            These are the basics of navigating around in the terminal. What else would we want to do in there? How about creating directories and files?

        Example 2: creating directories and files
            mkdir or make directory
            Go back to the home directory of your computer, and type:

            $ cd
            $ mkdir temp
            into the terminal. Now use ls to see the contents of the home directory. You should see a new folder, temp there. You just created a new folder! As its name suggests, mkdir creates directories. What if we wanted to create a directory inside a directory? cd into temp and type:

            $ mkdir -p stuff/bits
            Now do an ls and you should see the stuff folder. Now run cd stuff and do another ls. Inside stuff, the bits directory was created.

            What if you wanted to create files?

            touch or create files
            Inside the bits folder, type:

            $ touch bobs.txt
            Do an ls to check whether the file has been created. Inside bits, there should be a new file called bobs.txt. We used touch to create files. With touch you can create files with any extension, just don’t forget to specify what kind of file you are creating: for example, index.html, script.js, style.css are all valid extensions.

            mv or move item
            What if you created a file in the wrong place? There’s a command for that. Let’s move bobs.txt to somewhere new. Inside the bits folder type:

            $ mv bobs.txt ..
            Type ls and the file is no longer there. Type cd .., this moves you one folder up to the stuff folder. Then type ls and the bobs.txt file will be there. There are 3 parts to this command, the mv command, the item to be moved, here it’s bobs.txt, and the new destination for the item, here we have it as .. or one directory up the structure. You could also type the destination directory, replacing the .. with stuff and it would do the same job.

            Exercise 2: cd back into temp and create a couple of new folders with files in them
            Bonus: if you are on a Mac, type this into your terminal:
            $ say hello

--------------------------How to run Javascript files in terminal------------------------------------
    
    - Have Node.js installed
    - Change route to folder containing .js file
    - Remember to use "consele.log" so that the executed .js can show results in terminal
    - run code = "node [filename.extension]"

---------------------------How To Change Git Remote Origin--------------------------------------------
    written by Schkn

    As a developer, you are probably pushing your code to your remote origin every day.

    Git is a decentralized versioning system : even if you make changes locally, you have to push them to the central repository on a regular basis.

    However, in some cases, you might choose to migrate your Git repository or to merge existing ones.

    As a consequence, you may need to change the Git origin remote to a new URL.

    In this tutorial, you are going to learn how you can change the URL of a Git remote easily.

    Table of Contents
    Change Git Remote URL
    Changing Git Remote to SSH
    Getting Git Remote URL on GitHub
    Conclusion
    Change Git Remote URL
    In order to change the URL of a Git remote, you have to use the “git remote set-url” command and specify the name of the remote as well as the new remote URL to be changed.

    $ git remote set-url <remote_name> <remote_url>
    For example, let’s say that you want to change the URL of your Git origin remote.

    In order to achieve that, you would use the “set-url” command on the “origin” remote and you would specify the new URL.

    $ git remote set-url origin https://git-repo/new-repository.git
    git change remote using set url
    Congratulations, you successfully changed the URL of your Git remote!

    In order to verify that the changes were made, you can use the “git remote” command with the “-v” option (for verbose)

    $ git remote -v
    list remote using git remote
    Changing Git Remote to SSH
    In some cases, you may have configured your Git repository to use SSH key-based authentication.

    If you want to change your Git origin remote using SSH authentication, you can use the same “git remote set-url” command but you will have to use the SSH URL in order to connect.

    $ git remote set-url <remote_name> <ssh_remote_url>
    The SSH URL usually takes the following form :

    SSH URL : git@<repo_url>:<url>/<git_repository>.git
    For example, if your repository was configured on Github, you would use the following command to change your remote.

    $ git remote set-url origin git@github.com:user/repository.git
    change remote url to ssh repository
    If you are having trouble identifying the URL of your Git remote on Github, the next section might be helpful.

    Getting Git Remote URL on GitHub
    If you need to quickly find the URL of your Git remote on Github, you first need to select your repository by navigating to your repository list.

    > https://github.com/<user>/repositories
    repository list on github
    Under your repository list, select the repository you are interested in.

    Now that your repository is select, locate the “Clone or Download” option on the right-corner of your screen.

    Note : looking to learn how you can easily clone a Git repository? We got a complete guide written for you!

    When clicking on it, you should be presented with the URL of your Git repository.

    clone repository on github
    You can now use the “git remote set-url” command in order to set your Git remote URL properly (using the previous section).

    Conclusion
    In this tutorial, you learnt how you can easily change your Git remote URL (commonly named origin) by using the “git remote set-url” command.

    You also learnt that you can change it using a password protected SSH address.

    SSH key authorization is preferred over password authentication, if you have a repository with a large activity.

--------------------------Verifying connected Git Repository / Github Repositories----------------------------

        To obtain only the remote URL:

        git config --get remote.origin.url
        If you require full output, and you are on a network that can reach the remote repo where the origin resides:

        git remote show origin
        When using git clone (from GitHub, or any source repository for that matter) the default name for the source of the clone is "origin". Using git remote show will display the information about this remote name. The first few lines should show:

        C:\Users\jaredpar\VsVim> git remote show origin
        * remote origin
        Fetch URL: git@github.com:jaredpar/VsVim.git
        Push  URL: git@github.com:jaredpar/VsVim.git
        HEAD branch: master
        Remote branches:
        If you want to use the value in a script, you would use the first command listed in this answer.

-------------------------Remove files from Git commit (uncommit)-------------------------------------------------
    
    Remove Files From Git Commit
        
        In order to remove some files from a Git commit, use the “git reset” command with the “–soft” option and specify the commit before HEAD.

            $ git reset --soft HEAD~1
        
        When running this command, you will be presented with the files from the most recent commit (HEAD) and you will be able to commit them.

        Now that your files are in the staging area, you can remove them (or unstage them) using the “git reset” command again.

            $ git reset HEAD <file>

        Note : this time, you are resetting from HEAD as you simply want to exclude files from your staging area

        If you are simply not interested in this file anymore, you can use the “git rm” command in order to delete the file from the index (also called the staging area).

            $ git rm --cached <file>

        When you are done with the modifications, you can simply commit your changes again with the “–amend” option.

            $ git commit --amend
        
        To verify that the files were correctly removed from the repository, you can run the “git ls-files” command and check that the file does not appear in the file (if it was a new one of course)

            $ git ls-files

            <file1>
            <file2>
    
    
    Remove File From Commit using Git Restore
            
        Since Git 2.23, there is a new way to remove files from commit, but you will have to make sure that you are using a Git version greater or equal than 2.23.

            $ git --version

            git version 2.24.1

        Note : Git 2.23 was released in August 2019 and you may not have this version already available on your computer.

        To install newer versions of Git, you can check this tutorial.
        To remove files from commits, use the “git restore” command, specify the source using the “–source” option and the file to be removed from the repository.
        
        For example, in order to remove the file named “myfile” from the HEAD, you would write the following command

            $ git restore --source=HEAD^ --staged  -- <file>

        As an example, let’s pretend that you edited a file in your most recent commit on your “master” branch.

        The file is correctly committed but you want to remove it from your Git repository.

        To remove your file from the Git repository, you want first to restore it.

            $ git restore --source=HEAD^ --staged  -- newfile

            $ git status

            On branch master
            Your branch is ahead of 'origin/master' by 1 commit.
            (use "git push" to publish your local commits)

            Changes to be committed:
            (use "git restore --staged <file>..." to unstage)
                    modified:   newfile

            Changes not staged for commit:
            (use "git add <file>..." to update what will be committed)
            (use "git restore <file>..." to discard changes in working directory)
                    modified:   newfile
                    
        As you can see, your file is back to the staging area.

        From there, you have two choices, you can choose to edit your file in order to re-commit it again, or to simply delete it from your Git repository.

    
    Remove File from Git Repository

        In this section, we are going to describe the steps in order to remove the file from your Git repository.

        First, you need to unstage your file as you won’t be able to remove it if it is staged.

        To unstage a file, use the “git reset” command and specify the HEAD as source.

            $ git reset HEAD newfile

        When your file is correctly unstaged, use the “git rm” command with the “–cached” option in order to remove this file from the Git index (this won’t delete the file on disk)

            $ git rm --cached newfile

            rm 'newfile'

        Now if you check the repository status, you will be able to see that Git staged a deletion commit.

            $ git status

            On branch master
            Your branch is ahead of 'origin/master' by 1 commit.
            (use "git push" to publish your local commits)

            Changes to be committed:
            (use "git restore --staged <file>..." to unstage)
                    deleted:    newfile
        
        Now that your file is staged, simply use the “git commit” with the “–amend” option in order to amend the most recent commit from your repository.

            $ git commit --amend

            [master 90f8bb1] Commit from HEAD
            Date: Fri Dec 20 03:29:50 2019 -0500
            1 file changed, 2 deletions(-)
            delete mode 100644 newfile

        As you can see, this won’t create a new commit but it will essentially modify the most recent commit in order to include your changes.


    Remove Specific File from Git 
    
        In some cases, you don’t want all the files to be staged again : you only one to modify one very specific file of your repository.

        In order to remove a specific file from a Git commit, use the “git reset” command with the “–soft” option, specify the commit before HEAD and the file that you want to remove.

            $ git reset HEAD^ -- <file>

        When you are done with the modifications, your file will be back in the staging area.

        First, you can choose to remove the file from the staging area by using the “git reset” command and specify that you want to reset from the HEAD.

            $ git reset HEAD <file>

        Note : it does not mean that you will lose the changes on this file, just that the file will be removed from the staging area.

        If you want to completely remove the file from the index, you will have to use the “git rm” command with the “–cached” option.

            $ git rm --cached <file>

        In order to make sure that your file was correctly removed from the staging area, use the “git ls-files” command to list files that belong to the index.

            $ git ls-files

        When you are completely done with your modifications, you can amend the commit you removed the files from by using the “git commit” command with the “–amend” option.

            $ git commit --amend

-------------------------Untrack and remove files/folders from Git commit-------------------------------------------------

    How to remove untracked files in git

            Take a branch, where we have made some changes and added new files. However, if we reach a point where we no longer want these changes, we can reset the changes using:

                git reset --hard
                
            The code above will remove the changes in files that already are under version control. The untracked files will still present even after the reset command is used.

        To remove untracked files, use the git clean command.

            Let’s say we have one new file (file1.txt) and one new folder (folder1) with the fileinsidefolder.txt file added to our branch:

        Dry run
        
            Dry Run will tell you what files will be removed upon executing the clean command:

                git clean -n 
        
            This will only list the files, to list down the folders use

                git clean -nd

        Remove untracked files and folders
        
            To remove untracked files using -f flag with git clean command:

                git clean -f
        
            To remove untracked files inside a subfolder use:

                git clean -f folderpath 
        
            The untracked files will now be deleted. If you want to delete untracked folders too, you can use the -d flag:

                git clean -fd
        
            To remove ignore files, use the -x flag:

                git clean -fx

        Summary
        Once the untracked files are deleted, they cannot be restored.
        Before running the git clean command, perform dry run to know what the are files that will be deleted.
        -n flag is used to perform dry run.
        -f flag is used to remove untracked files.
        -fd flag is used to remove untracked files and folders.
        -fx flag is used to remove untracked and ignored files.



    To untrack a committed folder in a Git repository, you can follow these steps:

        Remove the folder from the Git index:
           
            git rm -r --cached path/to/folder
        
        This will remove the folder from Git's tracking, but keep it on your local machine.

        Add the folder to your .gitignore file:
    
            echo "path/to/folder/" >> .gitignore
        
        This will tell Git to ignore any changes to the folder in the future.

        Commit the changes:
    
            git commit -m "untrack path/to/folder"
        
        This will commit the changes to your repository and complete the untracking process.

        Note: If you want to remove the folder from both Git's tracking and your local machine, you can simply delete the folder from your local machine after running the first command above.
