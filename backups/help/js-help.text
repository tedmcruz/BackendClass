// Commentary

/* 
Multiline
Commentary
*/

/* 
Notes
Variables are defined by "let" and "var". These are modifiable.
Constants are defined by "const". This is not modifiable.
Use specific variable and constant names and use lowercase letter or camelCase while naming them. Don't use accents or spaces.
Number: Numbers and functions
Strings: Letters
Use " ; " at the end of every line in JS, unless it is an "if" function.
It is possibe to do mathematical formulas in JS without any aditional steps other then writng the function.
If the add fuction is used on a string, it will concatenate the strings without spaces.
To asigne a value to a variable, use " = " sign.
One "=" asigns, two "==" compares, three "===" compares value and type of data.
"!=" different from. "!==" stictly different from.
" < , <= , > , >= " comparative operators.
"&&" = and , "||" = or , "!" = not.
To use prompt it is imperative to use an " = " sign, for ex:[ let name = prompt("Enter Name","No name entered"); ] , this allows for user input. Whatever is witten after the " , " will be the default value if nothing is entered.
To use console it is imperative to use an " = " sign, for ex:[ console.log("Test message"); ] , this shows "Test message" on brower console.
To use alert it is not necessary to use " = " sign, for ex:[ alert("Test message"); ] , this will alert for user of message "Test message".
To convert a string to an integer use "parseInt()" function.
To convert an Integer to a String use se the "toString()" function.
To use for it is necessary to identify start (this funciton is executed), condition to end (which is compared to) and variation of code (increase or decrease, which is executed), for ex:[ for (let i = 1; i <= 10; i++)] ("i++"" means that the next sequence will add "1" to "i", which could be replaced with i=i+1)
When using 'break' inside "for", it will break code when "if" condition is met.
When using "continue" inside "for", it will skip code when "if" condition is met and continue with next value.
When using "while", the code will restart (rerun) as long as the "while" condition is met.
When using "do" "while", there is no need to put a new prompt at the end.
When using "switch" within "while", the code run will skip until the "case" with the entered value. The "default" will run when the prompt value doesn't match a "case" value.
*/

-------------------------Difference between "var" , "let" and "const"----------------------------------------

    /*
    var declarations are globally scoped or function scoped while let and const are block scoped.
    var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.
    They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized.
    While var and let can be declared without being initialized, const must be initialized during declaration.
    */

--------------------------Difference between ".js" , ".jsx"---------------------------------------------------

    /*
    They work the same way, but VS Code recognizes HTML properties and code as well as the javascript code when using the ".jsx" extension instead of the ".js" extension.
    */

----------------------------------------------   React-JS   ---------------------------------------------------

    - To jump to a definition (go to source definition) => "Control" + "Left-Click"
    - .jsx is easier to use than .js extension for react because it understands HTML properties.
    - Use "[]" in the time area of a "setTimeout", so that the code only runs once (recommended, will stop from recurring ask of information which would make ads cheaper to pay).
    - Use "{}" for objects
    - Use "[]" for arrays
    - "return" runs before "useEffect".
    - Use "npm install react-router-dom" to add dependencies of React-JS to manage routing within a proyect.